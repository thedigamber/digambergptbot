import logging
import aiohttp
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatAction, ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# Load API keys from .env
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DEEPSEEK_CHAT_URL = "https://api.deepseek.com/v1/chat/completions"
OPENAI_IMAGE_URL = "https://api.openai.com/v1/images/generations"

# Logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

WELCOME_MSG = """
ü™Ñ *Welcome to DigamberGPT!* ü™Ñ

Your personal AI assistant powered by DeepSeek & DALL¬∑E-3.

Commands:
/ask <question> ‚Äî Get smart AI answers
/imagine <prompt> ‚Äî Generate AI art
/help ‚Äî Show help

Just message me anything to chat üí¨
"""

HELP_MSG = """
üìñ *DigamberGPT Help* üìñ

‚Ä¢ /start - Welcome message
‚Ä¢ /ask <text> - Ask anything from AI
‚Ä¢ /imagine <text> - Generate AI image using DALL¬∑E-3
‚Ä¢ /help - Show help menu

You can also chat with me directly!
"""

class DigamberGPT:
    def __init__(self):
        self.chat_headers = {
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
            "Content-Type": "application/json"
        }
        self.image_headers = {
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "Content-Type": "application/json"
        }

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(WELCOME_MSG, parse_mode=ParseMode.MARKDOWN)

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(HELP_MSG, parse_mode=ParseMode.MARKDOWN)

    async def ask(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.message.reply_text("‚ùó Usage: /ask <your question>")
            return
        prompt = " ".join(context.args)
        await self._process_chat(update, prompt)

    async def imagine(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.message.reply_text("‚ùó Usage: /imagine <description>")
            return
        prompt = " ".join(context.args)
        await self._generate_image(update, prompt)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.message.text.startswith("/"):
            return
        await self._process_chat(update, update.message.text)

    async def _process_chat(self, update: Update, prompt: str):
        try:
            await update.message.chat.send_action(ChatAction.TYPING)
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    DEEPSEEK_CHAT_URL,
                    headers=self.chat_headers,
                    json={
                        "model": "deepseek-chat",
                        "messages": [{"role": "user", "content": prompt}],
                        "temperature": 0.7
                    }
                ) as resp:
                    data = await resp.json()
                    reply = data["choices"][0]["message"]["content"]
                    await update.message.reply_text(
                        f"ü§ñ *DigamberGPT:*\n{reply}",
                        parse_mode=ParseMode.MARKDOWN
                    )
        except Exception as e:
            logger.error(f"Chat Error: {e}")
            await update.message.reply_text("‚ö†Ô∏è Unable to process your message.")

    async def _generate_image(self, update: Update, prompt: str):
        try:
            await update.message.chat.send_action(ChatAction.UPLOAD_PHOTO)
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    OPENAI_IMAGE_URL,
                    headers=self.image_headers,
                    json={
                        "model": "dall-e-3",
                        "prompt": prompt,
                        "n": 1,
                        "size": "1024x1024"
                    }
                ) as resp:
                    data = await resp.json()
                    image_url = data["data"][0]["url"]
                    await update.message.reply_photo(
                        photo=image_url,
                        caption=f"üé® *Generated by DALL¬∑E-3:*\n`{prompt}`",
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîç View Full Image", url=image_url)
                        ]])
                    )
        except Exception as e:
            logger.error(f"Image Error: {e}")
            await update.message.reply_text("‚ö†Ô∏è Failed to generate image.")

def main():
    bot = DigamberGPT()
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(CommandHandler("help", bot.help))
    app.add_handler(CommandHandler("ask", bot.ask))
    app.add_handler(CommandHandler("imagine", bot.imagine))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))

    logger.info("‚úÖ DigamberGPT is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
